#!/usr/bin/env node

/**
 * üöÄ BROADCAST IMP√âRIO - Evolution + Baileys
 * 
 * Sistema de disparo em massa via CSV
 * - Usa Evolution API j√° configurada
 * - Imagem anexada (logo OracleWA)  
 * - Mensagens personalizadas
 * - Anti-ban integrado
 * 
 * USO: node broadcast-imperio.js caminho/para/arquivo.csv
 */

import { EvolutionCSVBroadcast } from './src/modules/broadcast/services/evolution-csv-broadcast.js';
import fs from 'fs';
import path from 'path';

// Verificar argumentos
if (process.argv.length < 3) {
    console.log('‚ùå Uso: node broadcast-imperio.js <arquivo.csv>');
    console.log('');
    console.log('üìã Exemplo:');
    console.log('   node broadcast-imperio.js clientes.csv');
    console.log('');
    console.log('üìÑ Formato CSV esperado:');
    console.log('   nome,telefone,email,cidade');
    console.log('   Jo√£o Silva,11999999999,joao@email.com,S√£o Paulo');
    console.log('   Maria Santos,21888888888,maria@email.com,Rio de Janeiro');
    process.exit(1);
}

const csvFilePath = process.argv[2];

// Verificar se arquivo existe
if (!fs.existsSync(csvFilePath)) {
    console.log(`‚ùå Arquivo n√£o encontrado: ${csvFilePath}`);
    process.exit(1);
}

// Template personalizado para Imp√©rio
const IMPERIO_MESSAGE_TEMPLATE = `üéØ Ol√° *{PRIMEIRO_NOME}*!

üèÜ **SORTEIO ESPECIAL DO IMP√âRIO** üèÜ

üí∞ *Pr√™mios incr√≠veis* te esperando!
üéÅ Participe agora e concorra a:
   ‚Ä¢ PIX de R$ 500,00
   ‚Ä¢ Produtos exclusivos  
   ‚Ä¢ E muito mais!

üìû *Quer participar?*
Responda esta mensagem para garantir sua vaga!

‚ú® *Imp√©rio Premia√ß√µes - Realizando Sonhos* ‚ú®

_Responda SAIR para n√£o receber mais mensagens_`;

async function main() {
    console.log('üöÄ BROADCAST IMP√âRIO - INICIANDO...');
    console.log(`üìÇ Arquivo CSV: ${path.basename(csvFilePath)}`);
    console.log(`üìÅ Caminho: ${path.resolve(csvFilePath)}`);
    console.log('');

    try {
        // Perguntar confirma√ß√£o
        console.log('‚ö†Ô∏è  ATEN√á√ÉO: Este disparo ir√° enviar mensagens para TODOS os contatos do CSV!');
        console.log('üí° Certifique-se de que:');
        console.log('   ‚úì O CSV est√° correto');
        console.log('   ‚úì A inst√¢ncia Evolution est√° conectada');
        console.log('   ‚úì Voc√™ tem autoriza√ß√£o para contatar estes n√∫meros');
        console.log('');
        
        // Em produ√ß√£o, descomentar para pedir confirma√ß√£o:
        /*
        const readline = require('readline').createInterface({
            input: process.stdin,
            output: process.stdout
        });
        
        const answer = await new Promise(resolve => {
            readline.question('Continuar? (s/N): ', resolve);
        });
        
        readline.close();
        
        if (answer.toLowerCase() !== 's') {
            console.log('‚ùå Broadcast cancelado pelo usu√°rio');
            process.exit(0);
        }
        */
        
        // Inicializar sistema
        const broadcast = new EvolutionCSVBroadcast();
        
        // Executar broadcast
        const result = await broadcast.executeBroadcast(
            csvFilePath, 
            IMPERIO_MESSAGE_TEMPLATE,
            { 
                withImage: true // Incluir imagem OracleWA
            }
        );
        
        if (result.success) {
            console.log('');
            console.log('üéâ BROADCAST CONCLU√çDO COM SUCESSO!');
            console.log(`üìä Taxa de sucesso: ${result.successRate}%`);
            console.log(`‚è±Ô∏è  Tempo total: ${result.duration} minutos`);
            
            // Salvar relat√≥rio
            const reportPath = `broadcast-report-${new Date().toISOString().slice(0,19).replace(/:/g,'-')}.json`;
            fs.writeFileSync(reportPath, JSON.stringify(result, null, 2));
            console.log(`üìÑ Relat√≥rio salvo: ${reportPath}`);
        }
        
    } catch (error) {
        console.error('üí• Erro no broadcast:', error.message);
        process.exit(1);
    }
}

// Executar
main().catch(console.error);